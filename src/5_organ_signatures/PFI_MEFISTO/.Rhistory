# mefisto_opts$sparseGP <- TRUE
myeloid_mofa <- prepare_mofa(
object = myeloid_mofa,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts,
mefisto_options = mefisto_opts
)
outfile <- "/nfs/team205/ed6/data/Fetal_immune/myeloid_mefisto_model.hdf5"
myeloid_mofa_trained <- run_mofa(myeloid_mofa, outfile = outfile)
myeloid_mofa <- create_mofa_from_matrix(data, groups = groups)
myeloid_mofa
myeloid_mofa
indir <- "/nfs/team205/ed6/data/Fetal_immune/LMM_data/LMM_input_MYELOID_PBULK/"
matrix <- readMM(file = paste0(indir, "matrix.mtx.gz"))
coldata <- read.csv(file = paste0(indir, "metadata.csv.gz")) %>%
column_to_rownames("X")
rowdata <- read.csv(file = paste0(indir, "gene.csv.gz"))
## Make SingleCellExperiment obj
myeloid_sce <- SingleCellExperiment(list(logcounts = t(matrix)), colData = coldata)
rownames(myeloid_sce) <- make.unique(rowdata$GeneName)
keep_ct <- data.frame(colData(myeloid_sce)) %>%
select(organ, anno_lvl_2) %>%
distinct() %>%
group_by(anno_lvl_2) %>%
summarise(n=n()) %>%
ungroup() %>%
filter(n > 1) %>%
pull(anno_lvl_2)
myeloid_sce <- myeloid_sce[,myeloid_sce$anno_lvl_2 %in% keep_ct]
# all_obs <- read_csv("/nfs/team205/ed6/data/Fetal_immune/PAN.A01.v01.entire_data_normalised_log.wGut.batchCorrected_20210118.")
## Feature selection w scran
dec <- modelGeneVar(myeloid_sce)
hvgs <- getTopHVGs(dec)
myeloid_sce <- myeloid_sce[hvgs,]
myeloid_sce <- myeloid_sce[which(rowSums(logcounts(myeloid_sce)) > 0),]
assay(myeloid_sce, "scaled_logcounts") <- t(scale(t(logcounts(myeloid_sce))))
library(scater)
myeloid_sce <- runPCA(myeloid_sce, scale=FALSE, ncomponents=30)
## Variance explained
percent.var <- attr(reducedDim(myeloid_sce), "percentVar")
plot(percent.var, log="y", xlab="PC", ylab="Variance explained (%)")
plotPCA(myeloid_sce, colour_by="organ", ncomponents=6)
plotPCA(myeloid_sce, colour_by="anno_lvl_2", ncomponents=6)
## Feature selection w scran WITHIN CELLTYPE
split(colnames(myeloid_sce), myeloid_sce$anno_lvl_2)
## Feature selection w scran WITHIN CELLTYPE
anno_groups <- split(colnames(myeloid_sce), myeloid_sce$anno_lvl_2)
## Feature selection w scran WITHIN CELLTYPE
anno_groups <- split(colnames(myeloid_sce), myeloid_sce$anno_lvl_2)
all_hvgs <- c()
for (i in anno_groups){
dec <- modelGeneVar(myeloid_sce[,i])
hvgs <- getTopHVGs(dec, n = 1000)
all_hvgs <- union(all_hvgs, hvgs)
}
all_hvgs
length(all_hvgs)
myeloid_sce
## Make SingleCellExperiment obj
myeloid_sce <- SingleCellExperiment(list(logcounts = t(matrix)), colData = coldata)
rownames(myeloid_sce) <- make.unique(rowdata$GeneName)
keep_ct <- data.frame(colData(myeloid_sce)) %>%
select(organ, anno_lvl_2) %>%
distinct() %>%
group_by(anno_lvl_2) %>%
summarise(n=n()) %>%
ungroup() %>%
filter(n > 1) %>%
pull(anno_lvl_2)
myeloid_sce <- myeloid_sce[,myeloid_sce$anno_lvl_2 %in% keep_ct]
myeloid_sce
# all_obs <- read_csv("/nfs/team205/ed6/data/Fetal_immune/PAN.A01.v01.entire_data_normalised_log.wGut.batchCorrected_20210118.")
## Feature selection w scran WITHIN CELLTYPE
anno_groups <- split(colnames(myeloid_sce), myeloid_sce$anno_lvl_2)
all_hvgs <- c()
for (i in anno_groups){
dec <- modelGeneVar(myeloid_sce[,i])
hvgs <- getTopHVGs(dec, n = 1000)
all_hvgs <- union(all_hvgs, hvgs)
}
myeloid_sce <- myeloid_sce[hvgs,]
myeloid_sce <- myeloid_sce[which(rowSums(logcounts(myeloid_sce)) > 0),]
# all_obs <- read_csv("/nfs/team205/ed6/data/Fetal_immune/PAN.A01.v01.entire_data_normalised_log.wGut.batchCorrected_20210118.")
## Feature selection w scran WITHIN CELLTYPE
anno_groups <- split(colnames(myeloid_sce), myeloid_sce$anno_lvl_2)
all_hvgs <- c()
for (i in anno_groups){
dec <- modelGeneVar(myeloid_sce[,i])
hvgs <- getTopHVGs(dec, n = 1000)
all_hvgs <- union(all_hvgs, hvgs)
}
myeloid_sce
myeloid_sce[,i]
myeloid_sce <- myeloid_sce[,myeloid_sce$anno_lvl_2 %in% keep_ct]
all_hvgs
union(all_hvgs, hvgs)
## Feature selection w scran WITHIN CELLTYPE
anno_groups <- split(colnames(myeloid_sce), myeloid_sce$anno_lvl_2)
all_hvgs <- c()
myeloid_sce[,i]
rownames(myeloid_sce) <- make.unique(rowdata$GeneName)
## Make SingleCellExperiment obj
myeloid_sce <- SingleCellExperiment(list(logcounts = t(matrix)), colData = coldata)
rownames(myeloid_sce) <- make.unique(rowdata$GeneName)
keep_ct <- data.frame(colData(myeloid_sce)) %>%
select(organ, anno_lvl_2) %>%
distinct() %>%
group_by(anno_lvl_2) %>%
summarise(n=n()) %>%
ungroup() %>%
filter(n > 1) %>%
pull(anno_lvl_2)
myeloid_sce <- myeloid_sce[,myeloid_sce$anno_lvl_2 %in% keep_ct]
myeloid_sce
## Feature selection w scran WITHIN CELLTYPE
anno_groups <- split(colnames(myeloid_sce), myeloid_sce$anno_lvl_2)
all_hvgs <- c()
dec <- modelGeneVar(myeloid_sce[,i])
myeloid_sce[,i]
hvgs <- getTopHVGs(dec, n = 1000)
hvgs
## Feature selection w scran WITHIN CELLTYPE
anno_groups <- split(colnames(myeloid_sce), myeloid_sce$anno_lvl_2)
all_hvgs <- c()
for (i in anno_groups){
dec <- modelGeneVar(myeloid_sce[,i])
hvgs <- getTopHVGs(dec, n = 1000)
all_hvgs <- union(all_hvgs, hvgs)
}
all_hvgs
length(all_hvgs)
myeloid_sce <- myeloid_sce[all_hvgs,]
myeloid_sce <- myeloid_sce[which(rowSums(logcounts(myeloid_sce)) > 0),]
myeloid_sce
assay(myeloid_sce, "scaled_logcounts") <- t(scale(t(logcounts(myeloid_sce))))
library(scater)
myeloid_sce <- runPCA(myeloid_sce, scale=FALSE, ncomponents=30)
## Variance explained
percent.var <- attr(reducedDim(myeloid_sce), "percentVar")
plot(percent.var, log="y", xlab="PC", ylab="Variance explained (%)")
plotPCA(myeloid_sce, colour_by="organ", ncomponents=6)
plotPCA(myeloid_sce, colour_by="anno_lvl_2", ncomponents=6)
plotPCA(myeloid_sce, colour_by="anno_lvl_2", text_by="anno_lvl_2")
## Split into one matrix x organ
org_ixs <- split(colnames(myeloid_sce), myeloid_sce$organ)
data <- lapply(org_ixs, function(i) assay(myeloid_sce[,i], "scaled_logcounts"))
data <- lapply(data, as.matrix)
## Collapse measurements from the same donor/library prep
new_sample <- paste(myeloid_sce$donor, myeloid_sce$method,myeloid_sce$anno_lvl_2, sep="-")
newsample_ixs <- split(new_sample, myeloid_sce$organ)
for (o in names(data)){
colnames(data[[o]]) <- newsample_ixs[[o]]
}
## Fill missing values
sample_names_unique <- unique(new_sample)
for (o in names(data)){
for (s in sample_names_unique){
if (!s %in% colnames(data[[o]])) {
m <- matrix(NA, nrow=nrow(data[[o]]))
colnames(m) <- s
data[[o]] <- cbind(data[[o]], m)
}
}
data[[o]] <- data[[o]][,sample_names_unique]
}
## Vector for group assignment
groups <- sapply(strsplit(sample_names_unique, "-"), function(x) x[3])
myeloid_mofa <- create_mofa_from_matrix(data, groups = groups)
myeloid_mofa
myeloid_mofa
mefisto_opts <- get_default_mefisto_options(myeloid_mofa)
mefisto_opts$warping <- FALSE
# mefisto_opts$sparseGP <- TRUE
myeloid_mofa <- prepare_mofa(
object = myeloid_mofa,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts,
mefisto_options = mefisto_opts
)
data_opts <- get_default_data_options(myeloid_mofa)
data_opts$center_groups <- FALSE
model_opts <- get_default_model_options(myeloid_mofa)
model_opts$num_factors <- 10
train_opts <- get_default_training_options(myeloid_mofa)
train_opts$seed <- 2020
train_opts$convergence_mode <- "fast" # use "fast" for faster training
train_opts$stochastic <- TRUE
mefisto_opts <- get_default_mefisto_options(myeloid_mofa)
mefisto_opts$warping <- FALSE
# mefisto_opts$sparseGP <- TRUE
myeloid_mofa <- prepare_mofa(
object = myeloid_mofa,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts,
mefisto_options = mefisto_opts
)
data_opts <- get_default_data_options(myeloid_mofa)
data_opts$center_groups <- FALSE
model_opts <- get_default_model_options(myeloid_mofa)
model_opts$num_factors <- 10
train_opts <- get_default_training_options(myeloid_mofa)
train_opts$seed <- 2020
train_opts$convergence_mode <- "fast" # use "fast" for faster training
mefisto_opts <- get_default_mefisto_options(myeloid_mofa)
mefisto_opts$warping <- FALSE
# mefisto_opts$sparseGP <- TRUE
myeloid_mofa <- prepare_mofa(
object = myeloid_mofa,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts,
mefisto_options = mefisto_opts
)
outfile <- "/nfs/team205/ed6/data/Fetal_immune/myeloid_mofa_model.hdf5"
myeloid_mofa_trained <- run_mofa(myeloid_mofa, outfile = outfile)
train_opts
data_opts <- get_default_data_options(myeloid_mofa)
data_opts$center_groups <- FALSE
model_opts <- get_default_model_options(myeloid_mofa)
model_opts$num_factors <- 10
train_opts <- get_default_training_options(myeloid_mofa)
train_opts$seed <- 2020
train_opts$convergence_mode <- "fast" # use "fast" for faster training
mefisto_opts <- get_default_mefisto_options(myeloid_mofa)
mefisto_opts$warping <- FALSE
# mefisto_opts$sparseGP <- TRUE
myeloid_mofa <- prepare_mofa(
object = myeloid_mofa,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts,
mefisto_options = mefisto_opts
)
train_opts
train_opts$stochastic <- FALSE
outfile <- "/nfs/team205/ed6/data/Fetal_immune/myeloid_mofa_model.hdf5"
myeloid_mofa_trained <- run_mofa(myeloid_mofa, outfile = outfile)
data_opts <- get_default_data_options(myeloid_mofa)
data_opts$center_groups <- FALSE
model_opts <- get_default_model_options(myeloid_mofa)
model_opts$num_factors <- 10
train_opts <- get_default_training_options(myeloid_mofa)
train_opts$seed <- 2020
train_opts$convergence_mode <- "fast" # use "fast" for faster training
train_opts$stochastic <- FALSE
mefisto_opts <- get_default_mefisto_options(myeloid_mofa)
mefisto_opts$warping <- FALSE
# mefisto_opts$sparseGP <- TRUE
myeloid_mofa <- prepare_mofa(
object = myeloid_mofa,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts,
mefisto_options = mefisto_opts
)
data_opts <- get_default_data_options(myeloid_mofa)
data_opts$center_groups <- FALSE
model_opts <- get_default_model_options(myeloid_mofa)
model_opts$num_factors <- 10
train_opts <- get_default_training_options(myeloid_mofa)
train_opts$seed <- 2020
train_opts$convergence_mode <- "fast" # use "fast" for faster training
train_opts$stochastic <- FALSE
mefisto_opts <- get_default_mefisto_options(myeloid_mofa)
mefisto_opts$warping <- FALSE
# mefisto_opts$sparseGP <- TRUE
myeloid_mofa <- prepare_mofa(
object = myeloid_mofa,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts,
mefisto_options = mefisto_opts
)
outfile <- "/nfs/team205/ed6/data/Fetal_immune/myeloid_mofa_model.hdf5"
myeloid_mofa_trained <- run_mofa(myeloid_mofa, outfile = outfile)
slotNames(myeloid_mofa_trained@training_stats)
plot(myeloid_mofa_trained@training_stats$time)
plot_factor_cor(myeloid_mofa_trained)
myeloid_mofa_trained <- load_model(outfile)
myeloid_mofa_trained
slotNames(myeloid_mofa_trained@training_stats)
plot(myeloid_mofa_trained@training_stats$time)
plot_factor_cor(myeloid_mofa_trained)
library(patchwork)
plot_variance_explained(myeloid_mofa_trained, y="group", factors = 1:10)
plot_variance_explained(myeloid_mofa_trained, y="group", factors = 11:20)
get_variance_explained(myeloid_mofa_trained, factors = 3, as.data.frame = TRUE)
get_variance_explained(myeloid_mofa_trained, factors = 2, as.data.frame = TRUE) %>%
filter()
get_variance_explained(myeloid_mofa_trained, factors = 2, as.data.frame = TRUE) %>%
head()
get_variance_explained(myeloid_mofa_trained, factors = 2, as.data.frame = TRUE) %>%
filter(view=="GU")
R2_df <- get_variance_explained(myeloid_mofa_trained, factors = 2, as.data.frame = TRUE)
R2_df <- get_variance_explained(myeloid_mofa_trained, factors = 2, as.data.frame = TRUE)$r2_per_factor
R2_df
R2_df %>%
filter(view=="GU" & factor=="Factor2") %>%
ggplot(aes(group, value)) + geom_point()
R2_df %>%
filter(view=="GU" & factor=="Factor2") %>%
drop_na()
R2_df %>%
filter(view=="GU" & factor=="Factor2") %>%
drop_na() %>%
ggplot(aes(group, value)) + geom_point()
R2_df %>%
filter(factor=="Factor2") %>%
drop_na() %>%
ggplot(aes(group, value)) + geom_point() +
facet_wrap(view~,)
R2_df %>%
filter(factor=="Factor2") %>%
drop_na() %>%
ggplot(aes(group, value)) + geom_point() +
facet_wrap(view~.)
R2_df %>%
filter(factor=="Factor2") %>%
drop_na()
R2_df %>%
filter(factor=="Factor2") %>%
drop_na() %>%
ggplot(aes(group, value)) + geom_point() +
facet_wrap(view~.)
plot_top_weights(myeloid_mofa_trained, factors = 2)
myeloid_mofa_trained@dimensions$G
myeloid_mofa_trained@dimensions$M
sapply(1:myeloid_mofa_trained@dimensions$M, function(x) plot_top_weights(myeloid_mofa_trained, factors = 2, view = x))
lapply(1:myeloid_mofa_trained@dimensions$M, function(x) plot_top_weights(myeloid_mofa_trained, factors = 2, view = x))
lapply(1:myeloid_mofa_trained@dimensions$M, function(x) plot_top_weights(myeloid_mofa_trained, factors = 2, view = x, scale = FALSE))
lapply(1:myeloid_mofa_trained@dimensions$M, function(x) plot_top_weights(myeloid_mofa_trained, factors = 3, view = x, scale = FALSE))
plot_factors(myeloid_mofa_trained, factors = 2:3)
plot_factors(myeloid_mofa_trained, factors = 2:3, color_by = "anno_lvl_2")
plot_factors(myeloid_mofa_trained, factors = 2:3, color_by = "group")
myeloid_mofa_trained@covariates
samples_metadata(myeloid_mofa_trained)
samples_metadata(myeloid_mofa_trained)[["sample"]]
samples_metadata(myeloid_mofa_trained) %>%
as.tibble()
samples_metadata(myeloid_mofa_trained) %>%
as.tibble() %>%
mutate(method=sapply(str_split(sample), function(x) x[2]))
samples_metadata(myeloid_mofa_trained) %>%
as.tibble() %>%
mutate(method=sapply(str_split(sample, "-"), function(x) x[2]))
samples_metadata(myeloid_mofa_trained) %>%
as.tibble() %>%
mutate(method=sapply(str_split(sample, "-"), function(x) x[2]),
donor=sapply(str_split(sample, "-"), function(x) x[1])
)
samples_metadata(myeloid_mofa_trained) <- samples_metadata(myeloid_mofa_trained) %>%
as.tibble() %>%
mutate(method=sapply(str_split(sample, "-"), function(x) x[2]),
donor=sapply(str_split(sample, "-"), function(x) x[1])
)
plot_factors(myeloid_mofa_trained, factors = 2:3, color_by = "method")
plot_factors(myeloid_mofa_trained, factors = 1:10, color_by = "method")
plot_factors(myeloid_mofa_trained, factors = 1:10, color_by = "method")
plot_factors(myeloid_mofa_trained, factors = 1:10, color_by = "method")
plot_factors(myeloid_mofa_trained, factors = 1:10, color_by = "donor")
## Vector for time assignment
times <- distinct(data.frame(age=myeloid_sce$age, new_sample)) %>%
column_to_rownames('new_sample') %>%
.[sample_names_unique,]
samples_metadata(myeloid_mofa)[["time"]] <- times
samples_metadata(myeloid_mofa_trained)[["time"]] <- times
plot_factors(myeloid_mofa_trained, factors = 1:10, color_by = "method")
plot_factors(myeloid_mofa_trained, factors = 1:10, color_by = "donor")
plot_factors(myeloid_mofa_trained, factors = 1:10, color_by = "time")
plot_factor(myeloid_mofa_trained, factors = 3, group_by = "donor")
plot_factor(myeloid_mofa_trained, factors = 3, color_by = "donor")
plot_factor(myeloid_mofa_trained, factors = 10, color_by = "donor")
plot_factor(myeloid_mofa_trained, factors = 5, group_by = "donor")
plot_factor(myeloid_mofa_trained, factors = 5, group_by = "method")
plot_factor(myeloid_mofa_trained, factors = 5, color_by = "method")
plot_factor(myeloid_mofa_trained, factors = 2, color_by = "method")
plot_factor(myeloid_mofa_trained, factors = 2, color_by = "method") +
coord_flip()
plot_factor(myeloid_mofa_trained, factors = 2) +
coord_flip()
plot_factor(myeloid_mofa_trained, factors = 2, group_by = "donor") +
coord_flip()
plot_factor(myeloid_mofa_trained, factors = 2:3) +
coord_flip()
plot_factor(myeloid_mofa_trained, factors = 2:3, color_by = "donor") +
coord_flip()
plot_factor(myeloid_mofa_trained, factors = 2:3) +
coord_flip()
plot_variance_explained(myeloid_mofa_trained, y="group", factors = 2:3)
plot_factor(myeloid_mofa_trained, factors = 2:3) +
coord_flip()
plot_variance_explained(myeloid_mofa_trained, y="group", factors = 2:3)
plot_factors(myeloid_mofa_trained, factors = 2:3)
plot_factors(myeloid_mofa_trained, factors = 2:3, color_by = "group")
plot_variance_explained(myeloid_mofa_trained, y="group", factors = 2:3)
plot_factors(myeloid_mofa_trained, factors = 2:3, color_by = "group")
plot_variance_explained(myeloid_mofa_trained, y="group", factors = 2:3)
plot_factor(myeloid_mofa_trained, factors = 2:3, color_by = "group")
plot_factor(myeloid_mofa_trained, factors = 2:3, color_by = "group") +
coord_flip()
plot_variance_explained(myeloid_mofa_trained, y="group", factors = 2:3)
plot_factor(myeloid_mofa_trained, factors = 2:3, color_by = "group") +
coord_flip()
lapply(1:myeloid_mofa_trained@dimensions$M, function(x) plot_weights_scatter(myeloid_mofa_trained, factors = 3, view = x, scale = FALSE))
lapply(1:myeloid_mofa_trained@dimensions$M, function(x) plot_weights_scatter(myeloid_mofa_trained, factors = 2:3, view = x, scale = FALSE))
lapply(1:myeloid_mofa_trained@dimensions$M, function(x) plot_weights_scatter(myeloid_mofa_trained, factors = 2:3, view = x, scale = FALSE) + ggtitle(names(myeloid_mofa_trained@data)[x]))
lapply(1:myeloid_mofa_trained@dimensions$M, function(x) plot_weights(myeloid_mofa_trained, factors = 2, view = x, scale = FALSE) + ggtitle(names(myeloid_mofa_trained@data)[x]))
plot_weights_heatmap(myeloid_mofa_trained, view="GU")
plot_weights_heatmap(myeloid_mofa_trained, view="GU", threshold = 0.1)
lapply(1:myeloid_mofa_trained@dimensions$M, function(x) plot_weights(myeloid_mofa_trained, factors = 4, view = x, scale = FALSE) + ggtitle(names(myeloid_mofa_trained@data)[x]))
get_weights(myeloid_mofa_trained, factors = 5, as.data.frame = TRUE)
get_weights(myeloid_mofa_trained, factors = 5, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+"))
get_weights(myeloid_mofa_trained, factors = 5, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+")) %>%
group_by(view) %>%
mutate(rank=rank(value)) %>%
ggplot(aes(rank, value)) +
geom_point()
get_weights(myeloid_mofa_trained, factors = 5, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+")) %>%
group_by(view) %>%
# mutate(rank=rank(value)) %>%
filter(abs(value) > 0.5) %>%
ggplot(aes(feature, view, fill=value)) +
geom_tile()
get_weights(myeloid_mofa_trained, factors = 5, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+")) %>%
group_by(view) %>%
# mutate(rank=rank(value)) %>%
filter(abs(value) > 0.5) %>%
ungroup() %>%
arrange(value) %>%
mutate(feature=factor(feature, levels = unique(feature))) %>%
ggplot(aes(feature, view, fill=value)) +
geom_tile()
get_weights(myeloid_mofa_trained, factors = 5, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+")) %>%
group_by(view) %>%
# mutate(rank=rank(value)) %>%
filter(abs(value) > 0.5) %>%
ungroup() %>%
arrange(value) %>%
mutate(feature=factor(feature, levels = unique(feature))) %>%
ggplot(aes(view, feature, fill=value)) +
geom_tile()
get_weights(myeloid_mofa_trained, factors = 5, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+")) %>%
group_by(view) %>%
# mutate(rank=rank(value)) %>%
filter(abs(value) > 0.6) %>%
ungroup() %>%
arrange(value) %>%
mutate(feature=factor(feature, levels = unique(feature))) %>%
ggplot(aes(view, feature, fill=value)) +
geom_tile()
plot_data_heatmap(myeloid_mofa_trained, view="TH", factor = 4)
plot_data_heatmap(myeloid_mofa_trained, view="TH", factor = 4)
plot_data_heatmap(myeloid_mofa_trained, view="BM", factor = 4)
plot_factor(myeloid_mofa_trained, factors = 4)
plot_variance_explained(myeloid_mofa_trained, y="group", factors = 4)
plot_factor(myeloid_mofa_trained, factors = 4)
plot_data_heatmap(myeloid_mofa_trained, view="TH", factor = 4)
plot_data_heatmap(myeloid_mofa_trained, view="TH", factor = 4)
get_weights(myeloid_mofa_trained, view="TH",factors = 5, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+"))
MOFA2::plot_group_kernel(myeloid_mofa_trained)
get_weights(myeloid_mofa_trained, view="TH",factors = 5, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+")) %>%
mutate(rank=rank(abs(value)))
get_weights(myeloid_mofa_trained, view="TH",factors = 5, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+")) %>%
mutate(rank=rank(abs(value)))  %>%
top_n(20, 'rank')
get_weights(myeloid_mofa_trained, view="TH",factors = 5, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+")) %>%
mutate(rank=rank(abs(value)))  %>%
top_n(20, rank)
get_weights(myeloid_mofa_trained, view="TH",factors = 4, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+")) %>%
mutate(rank=rank(abs(value)))  %>%
top_n(20, rank)
plot_data_heatmap(myeloid_mofa_trained, view="TH", factor = 4, features = 30)
plot_data_heatmap(myeloid_mofa_trained, view="TH", factor = 4, features = 50)
get_weights(myeloid_mofa_trained, view="TH",factors = 4, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+")) %>%
mutate(rank=rank(abs(value)))  %>%
top_n(50, rank)
get_weights(myeloid_mofa_trained, view="TH",factors = 4, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+")) %>%
mutate(rank=rank(abs(value)))  %>%
top_n(50, rank) %>%
pull(feature)
top_genes <- get_weights(myeloid_mofa_trained, view="TH",factors = 4, as.data.frame = TRUE, scale = TRUE) %>%
mutate(feature=str_remove(feature, "_.+")) %>%
mutate(rank=rank(abs(value)))  %>%
top_n(50, rank) %>%
pull(feature)
myeloid_sce[top_genes, ]
m_scaled <- assay(myeloid_sce[top_genes, ], 'scaled_logcounts')
pheatmap::pheatmap(m_scaled)
m_scaled
dim(m_scaled)
pheatmap::pheatmap(m_scaled, show_colnames = F)
anno_col = data.frame(annotation=myeloid_sce$anno_lvl_2,
organ=myeloid_sce$organ)
pheatmap::pheatmap(m_scaled, show_colnames = F, annotation_col = anno_col)
anno_col
rownames(anno_col) <- rownames(myeloid_sce)
