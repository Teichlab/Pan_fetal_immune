dplyr::mutate(org_AMI=AMIs)
## Fix long names for plotting
all_groups <- names(get_data(mofa_trained)[[1]])
group_labeller <- all_groups %>%
str_replace_all("_", " ") %>%
{ifelse(nchar(.) > 20, str_replace(., " ", "\n"), .)} %>%
setNames(all_groups)
AMI_pl_df <- high_r2_groups_df %>%
dplyr::group_by(group) %>%
dplyr::mutate(mean_AMI=max(org_AMI)) %>%
dplyr::ungroup() %>%
dplyr::arrange(mean_AMI) %>%
dplyr::mutate(group=group_labeller[as.character(group)]) %>%
dplyr::mutate(group=factor(group, levels=unique(group)))
AMI_pl_df %>%
ggplot(aes(org_AMI, group)) +
geom_point(aes(fill=value), size=3, shape=21) +
ggrepel::geom_text_repel(aes(label=str_remove(factor, "Factor")), color="black", force = 0.1, direction = 'x',
nudge_y           = 0.4,
hjust             = 0) +
xlab("Adj. Mutual Information - Organ ") +
scale_fill_gradientn(colours = c("white", "red"), name="% var. explained") +
theme_bw(base_size = 15)
for (fact in as.character(unique(AMI_pl_df$factor))){
p <- AMI_pl_df %>%
ggplot(aes(org_AMI, group)) +
geom_point(fill="grey", size=2, shape=21, color="grey") +
geom_point(data = . %>% dplyr::filter(factor==fact),
aes(fill=value), size=3, shape=21) +
xlab("Adj. Mutual Information - Organ ") +
scale_fill_gradientn(colours = c("white", "red"), name="% var. explained") +
theme_bw(base_size = 15) +
ggtitle(fact)
print(p)
}
get_top_weight_genes <- function(mofa_trained, f, n_top=20, which="top"){
w_df <- get_weights(mofa_trained, factors = f, as.data.frame = TRUE) %>%
dplyr::arrange(value)
top_genes <- w_df %>%
dplyr::top_n(n_top, value) %>%
dplyr::pull(feature) %>%
as.character()
bot_genes <-  w_df %>%
dplyr::top_n(n_top, -value) %>%
dplyr::pull(feature) %>%
as.character()
if (which=="top") {
genes <- top_genes
} else if (which=="bottom"){
genes <- bot_genes
} else if (which=="both"){
genes <- c(top_genes, bot_genes)
}
return(genes)
}
plot_data_top_weights <- function(mofa_trained, ct, f, n_top=20, which="top"){
genes <- get_top_weight_genes(mofa_trained, f, which=which, n_top=n_top)
data <- get_data(mofa_trained, groups=ct)[[1]][[1]][genes,]
pl_df <- reshape2::melt(data, varnames=c("gene", "sample")) %>%
dplyr::left_join(samples_metadata(mofa_trained)) %>%
dplyr::arrange(age) %>%
dplyr::mutate(sample=factor(sample, levels=unique(sample))) %>%
dplyr::group_by(gene) %>%
dplyr::mutate(value=scale(value))
pl_df %>%
ggplot(aes(sample, gene, fill=value)) +
geom_tile() +
facet_grid(.~organ, space="free", scales="free") +
scale_fill_gradient2(high="red", low="blue", name="Scaled\nexpression") +
xlab("----age--->") + ylab(glue("{which} weight genes")) +
theme_bw(base_size=16) +
theme(axis.ticks.x = element_blank(), axis.text.x = element_blank()) +
ggtitle(glue('{ct} - {f}'))
}
for (g in all_groups){
fs <- get_top_factor_per_celltype(mofa_trained, g, min_R2=5)
fs <- fs[!fs %in% exclude_factors]
if (length(fs) > 0){
top_plots <- lapply(fs, function(x) (plot_data_top_weights(mofa_trained, g, x, which="top") + remove_x_axis()) /
plot_data_top_weights(mofa_trained, g, x, which="bottom") + ggtitle("")
)
full_pl <-wrap_plots(top_plots, ncol=1)
ggsave(glue("{figdir}/top_factors_expr_{g}.pdf"),plot=full_pl,  width=12, height = 10*length(top_plots))
}
}
## Get factors that explain most variance in each celltype
get_top_factor_per_celltype <- function(mofa_trained, gr, min_R2=2){
get_variance_explained(mofa_trained, as.data.frame = TRUE)[[1]] %>%
filter(group==gr) %>%
filter(value >= min_R2) %>%
pull(factor) %>%
as.character()
}
get_top_weight_genes <- function(mofa_trained, f, n_top=20, which="top"){
w_df <- get_weights(mofa_trained, factors = f, as.data.frame = TRUE) %>%
dplyr::arrange(value)
top_genes <- w_df %>%
dplyr::top_n(n_top, value) %>%
dplyr::pull(feature) %>%
as.character()
bot_genes <-  w_df %>%
dplyr::top_n(n_top, -value) %>%
dplyr::pull(feature) %>%
as.character()
if (which=="top") {
genes <- top_genes
} else if (which=="bottom"){
genes <- bot_genes
} else if (which=="both"){
genes <- c(top_genes, bot_genes)
}
return(genes)
}
plot_data_top_weights <- function(mofa_trained, ct, f, n_top=20, which="top"){
genes <- get_top_weight_genes(mofa_trained, f, which=which, n_top=n_top)
data <- get_data(mofa_trained, groups=ct)[[1]][[1]][genes,]
pl_df <- reshape2::melt(data, varnames=c("gene", "sample")) %>%
dplyr::left_join(samples_metadata(mofa_trained)) %>%
dplyr::arrange(age) %>%
dplyr::mutate(sample=factor(sample, levels=unique(sample))) %>%
dplyr::group_by(gene) %>%
dplyr::mutate(value=scale(value))
pl_df %>%
ggplot(aes(sample, gene, fill=value)) +
geom_tile() +
facet_grid(.~organ, space="free", scales="free") +
scale_fill_gradient2(high="red", low="blue", name="Scaled\nexpression") +
xlab("----age--->") + ylab(glue("{which} weight genes")) +
theme_bw(base_size=16) +
theme(axis.ticks.x = element_blank(), axis.text.x = element_blank()) +
ggtitle(glue('{ct} - {f}'))
}
for (g in all_groups){
fs <- get_top_factor_per_celltype(mofa_trained, g, min_R2=5)
fs <- fs[!fs %in% exclude_factors]
if (length(fs) > 0){
top_plots <- lapply(fs, function(x) (plot_data_top_weights(mofa_trained, g, x, which="top") + remove_x_axis()) /
plot_data_top_weights(mofa_trained, g, x, which="bottom") + ggtitle("")
)
full_pl <-wrap_plots(top_plots, ncol=1)
ggsave(glue("{figdir}/top_factors_expr_{g}.pdf"),plot=full_pl,  width=12, height = 10*length(top_plots))
}
}
get_variance_explained(mofa_trained, as.data.frame = TRUE)[[1]] %>%
filter(group==gr) %>%
filter(value >= min_R2) %>%
dplyr::pull(factor) %>%
as.character()
## Get factors that explain most variance in each celltype
get_top_factor_per_celltype <- function(mofa_trained, gr, min_R2=2){
get_variance_explained(mofa_trained, as.data.frame = TRUE)[[1]] %>%
filter(group==gr) %>%
filter(value >= min_R2) %>%
dplyr::pull(factor) %>%
as.character()
}
for (g in all_groups){
fs <- get_top_factor_per_celltype(mofa_trained, g, min_R2=5)
fs <- fs[!fs %in% exclude_factors]
if (length(fs) > 0){
top_plots <- lapply(fs, function(x) (plot_data_top_weights(mofa_trained, g, x, which="top") + remove_x_axis()) /
plot_data_top_weights(mofa_trained, g, x, which="bottom") + ggtitle("")
)
full_pl <-wrap_plots(top_plots, ncol=1)
ggsave(glue("{figdir}/top_factors_expr_{g}.pdf"),plot=full_pl,  width=12, height = 10*length(top_plots))
}
}
get_variance_explained(mofa_trained, as.data.frame = TRUE)[[1]]
get_variance_explained(mofa_trained, as.data.frame = TRUE)[[1]] %>% head()
## Get factors that explain most variance in each celltype
get_top_factor_per_celltype <- function(mofa_trained, gr, min_R2=2){
get_variance_explained(mofa_trained, as.data.frame = TRUE)[[1]] %>%
dplyr::filter(group==gr) %>%
dplyr::filter(value >= min_R2) %>%
dplyr::pull(factor) %>%
as.character()
}
for (g in all_groups){
fs <- get_top_factor_per_celltype(mofa_trained, g, min_R2=5)
fs <- fs[!fs %in% exclude_factors]
if (length(fs) > 0){
top_plots <- lapply(fs, function(x) (plot_data_top_weights(mofa_trained, g, x, which="top") + remove_x_axis()) /
plot_data_top_weights(mofa_trained, g, x, which="bottom") + ggtitle("")
)
full_pl <-wrap_plots(top_plots, ncol=1)
ggsave(glue("{figdir}/top_factors_expr_{g}.pdf"),plot=full_pl,  width=12, height = 10*length(top_plots))
}
}
minmax_normalize <- function(x, na.rm = TRUE) {
return((x- min(x)) /(max(x)-min(x)))
}
plot_data_top_weights_clustered <- function(mofa_trained, cts, f, n_top=20, which="top", scale_data=TRUE){
genes <- get_top_weight_genes(mofa_trained, f, which=which, n_top=n_top)
genes_anno <- data.frame(gene=genes)
if (which!="both"){ genes_anno[["weight"]] <- rep(which, n_top) }  else { genes_anno[["weight"]] <- c(rep("top", n_top), rep("bottom", n_top)) }
data_ls <- get_data(mofa_trained, groups=cts)[[1]]
data <- Reduce(cbind, data_ls)[genes,]
ct_pl_ls <- lapply(cts, function(ct){
ct_samples <- colnames(mofa_trained@data[[1]][[ct]])
ct_data <- data[,ct_samples]
if (scale_data){
ct_data <- t(apply(ct_data, 1, minmax_normalize))
}
cl_heatmap <- pheatmap::pheatmap(ct_data, show_colnames= FALSE, cluster_rows = FALSE, )
col_order <- cl_heatmap$tree_col$labels[cl_heatmap$tree_col$order]
pl_df <- reshape2::melt(ct_data, varnames=c("gene", "sample")) %>%
dplyr::left_join(samples_metadata(mofa_trained)) %>%
dplyr::left_join(genes_anno) %>%
dplyr::mutate(sample=factor(sample, levels=col_order),
weight=factor(weight, levels=c("top", "bottom")))
pl_bar <- pl_df %>%
ggplot(aes(sample, "organ", fill=organ)) +
geom_tile() +
scale_fill_manual(values=org_colors) +
theme_void() +
theme(legend.position = "none")
pl_hm <- pl_df %>%
ggplot(aes(sample, gene, fill=value)) +
geom_tile() +
scale_fill_viridis_c(option="magma", name="Scaled\nexpression") +
xlab(group_labeller[ct]) +
facet_grid(weight~., scales="free", space="free") +
theme_bw(base_size=12) +
theme(axis.ticks.x = element_blank(), axis.text.x = element_blank())
(pl_bar / pl_hm) + plot_layout(heights = c(1,10))
})
if (length(ct_pl_ls) > 1){
## Remove gene names to all except 1st plot
ct_pl_ls[2:length(ct_pl_ls)] <- lapply(ct_pl_ls[2:length(ct_pl_ls)], function(p) p + remove_y_axis())
## Remove strip names to all except last plot
ct_pl_ls[1:(length(ct_pl_ls)-1)] <- lapply(ct_pl_ls[1:(length(ct_pl_ls)-1)], function(p) p + theme(strip.background = element_blank(),strip.text.y = element_blank()))
wrap_plots(ct_pl_ls) +
plot_layout(guides="collect", nrow = 1)
} else {
ct_pl_ls[[1]]
}
}
plot_factor_organ_boxplots <- function(f, cts){
pl_ls <- lapply(cts, function(g) plot_factor(mofa_trained,groups = c(g), color_by="organ", dot_size = 3, factors = f,
add_boxplot = TRUE, boxplot_alpha = 0.1,
group_by = 'group', dodge = TRUE) +
scale_fill_manual(values=org_colors) +
scale_color_manual(values=org_colors) +
ggtitle(group_labeller[g])
)
wrap_plots(pl_ls) +
plot_layout(guides="collect", nrow=1) +
plot_annotation(title=f)
}
high_r2_groups_df_filt <- high_r2_groups_df %>%
dplyr::filter(org_AMI > 0.3) %>%
dplyr::arrange(- org_AMI)
for (fact in as.character(unique(high_r2_groups_df_filt$factor))){
fact_cts = as.character(high_r2_groups_df_filt$group[high_r2_groups_df_filt$factor==fact])
p_top <- plot_factor_organ_boxplots(cts=fact_cts, f=fact)
p_bottom <- plot_data_top_weights_clustered(mofa_trained, cts=fact_cts, f=fact, which = "both", scale_data = TRUE)
f_pl <- (p_top / p_bottom) +
plot_layout(heights = c(1,2.5))
ggsave(glue("{figdir}/{fact}_top_organ_AMI_plot.pdf"), plot=f_pl,  width=5 + (3*length(fact_cts)), height = 9)
}
for (fact in as.character(unique(high_r2_groups_df_filt$factor))){
fact_cts = as.character(high_r2_groups_df_filt$group[high_r2_groups_df_filt$factor==fact])
p_top <- plot_factor_organ_boxplots(cts=fact_cts, f=fact)
p_bottom <- plot_data_top_weights_clustered(mofa_trained, cts=fact_cts, f=fact, which = "both", scale_data = TRUE)
f_pl <- (p_top / p_bottom) +
plot_layout(heights = c(1,2.5))
ggsave(glue("{figdir}/{fact}_top_organ_AMI_plot.pdf"), plot=f_pl,  width=5 + (3*length(fact_cts)), height = 9, limitsize = FALSE)
}
plot_factor(mofa_trained, factors = 2, color_by = "organ", group_by = 'organ')
plot_factor(mofa_trained, factors = 2, color_by = "organ")
plot_factors(mofa_trained, factors = 1:2, color_by = "organ")
plot_factor(mofa_trained, factors = 2, color_by = "organ")
plot_factor(mofa_trained, factors = 2, color_by = "organ", group_by = 'organ')
# BiocManager::install("MOFAdata")
library(MOFAdata)
utils::data(reactomeGS)
head(rownames(reactomeGS))
## Remove row with NA
reactomeGS <- reactomeGS[!is.na(rownames(reactomeGS)),]
library(EnsDb.Hsapiens.v86)
# BiocManager::install('clusterProfiler')
# BiocManager::install('msigdbr')
library(clusterProfiler)
BiocManager::install('clusterProfiler')
BiocManager::install('msigdbr')
library(clusterProfiler)
go_term_enrichment <- function(mofa_trained, f, which=which, n_top=n_top){
genes <- get_top_weight_genes(mofa_trained, f, which=which, n_top=n_top)
em_up <- enricher(marker_genes_up, TERM2GENE=m_t2g, pAdjustMethod = "fdr",
universe = all_hvgs
)
em_res_up <- em_up@result[em_up@result$qvalue < 0.1,] %>%
dplyr::select(- c(Description))
return(em_res_up)
}
go_term_enrichment(mofa_trained, 10, "top", 20)
library(clusterProfiler)
BiocManager::install('clusterProfiler')
BiocManager::install('AnnotationDbi')
BiocManager::install('clusterProfiler')
library(AnnotationDbi)
BiocManager::available()
biocLite("AnnotationDbi")
BiocManager::install("GO.db")
help(BiocManager::install())
help(BiocManager::install)
?BiocManager::install
BiocManager::install('BiocManager', update=TRUE)
install.packages("BiocManager")
update.packages("BiocManager")
BiocManager::install("GO.db")
BiocManager::valid()
BiocManager::valid()$too_new
BiocManager::valid()$out_of_date
sessionInfo()
BiocManager::install("EnsDb.Hsapiens.v86")
BiocManager::install("biocBase")
BiocManager::install("Biobase")
org_colors
plot(org_colors)
plot(org_colors$organ, 1, col=org_colors)
ggplot(org_colors, aes(organ, color)) + geom_point()
org_colors
org_colors <- read_csv("~/Pan_fetal_immune/metadata/organ_colors.csv")
# install.packages("ellipsis")
suppressPackageStartupMessages({
library(tidyverse)
library(MOFA2)
library(Matrix)
library(SingleCellExperiment)
library(scran)
library(glue)
library(scater)
library(patchwork)
library(batchelor)
library(rhdf5)
# library(ggraph)
}
)
org_colors <- read_csv("~/Pan_fetal_immune/metadata/organ_colors.csv")
org_colors
org_colors <- read_csv("~/Pan_fetal_immune/metadata/organ_colors.csv")
org_colors
org_colors <- setNames(org_colors$color, org_colors$organ)
minmax_normalize <- function(x, na.rm = TRUE) {
return((x- min(x)) /(max(x)-min(x)))
}
plot_data_top_weights_clustered <- function(mofa_trained, cts, f, n_top=20, which="top", scale_data=TRUE){
genes <- get_top_weight_genes(mofa_trained, f, which=which, n_top=n_top)
genes_anno <- data.frame(gene=genes)
if (which!="both"){ genes_anno[["weight"]] <- rep(which, n_top) }  else { genes_anno[["weight"]] <- c(rep("top", n_top), rep("bottom", n_top)) }
data_ls <- get_data(mofa_trained, groups=cts)[[1]]
data <- Reduce(cbind, data_ls)[genes,]
ct_pl_ls <- lapply(cts, function(ct){
ct_samples <- colnames(mofa_trained@data[[1]][[ct]])
ct_data <- data[,ct_samples]
if (scale_data){
ct_data <- t(apply(ct_data, 1, minmax_normalize))
}
cl_heatmap <- pheatmap::pheatmap(ct_data, show_colnames= FALSE, cluster_rows = FALSE, )
col_order <- cl_heatmap$tree_col$labels[cl_heatmap$tree_col$order]
pl_df <- reshape2::melt(ct_data, varnames=c("gene", "sample")) %>%
dplyr::left_join(samples_metadata(mofa_trained)) %>%
dplyr::left_join(genes_anno) %>%
dplyr::mutate(sample=factor(sample, levels=col_order),
weight=factor(weight, levels=c("top", "bottom")))
pl_bar <- pl_df %>%
ggplot(aes(sample, "organ", fill=organ)) +
geom_tile() +
scale_fill_manual(values=org_colors) +
theme_void() +
theme(legend.position = "none")
pl_hm <- pl_df %>%
ggplot(aes(sample, gene, fill=value)) +
geom_tile() +
scale_fill_viridis_c(option="magma", name="Scaled\nexpression") +
xlab(group_labeller[ct]) +
facet_grid(weight~., scales="free", space="free") +
theme_bw(base_size=12) +
theme(axis.ticks.x = element_blank(), axis.text.x = element_blank())
(pl_bar / pl_hm) + plot_layout(heights = c(1,10))
})
if (length(ct_pl_ls) > 1){
## Remove gene names to all except 1st plot
ct_pl_ls[2:length(ct_pl_ls)] <- lapply(ct_pl_ls[2:length(ct_pl_ls)], function(p) p + remove_y_axis())
## Remove strip names to all except last plot
ct_pl_ls[1:(length(ct_pl_ls)-1)] <- lapply(ct_pl_ls[1:(length(ct_pl_ls)-1)], function(p) p + theme(strip.background = element_blank(),strip.text.y = element_blank()))
wrap_plots(ct_pl_ls) +
plot_layout(guides="collect", nrow = 1)
} else {
ct_pl_ls[[1]]
}
}
plot_factor_organ_boxplots <- function(f, cts){
pl_ls <- lapply(cts, function(g) plot_factor(mofa_trained,groups = c(g), color_by="organ", dot_size = 3, factors = f,
add_boxplot = TRUE, boxplot_alpha = 0.1,
group_by = 'group', dodge = TRUE) +
scale_fill_manual(values=org_colors) +
scale_color_manual(values=org_colors) +
ggtitle(group_labeller[g])
)
wrap_plots(pl_ls) +
plot_layout(guides="collect", nrow=1) +
plot_annotation(title=f)
}
high_r2_groups_df_filt <- high_r2_groups_df %>%
dplyr::filter(org_AMI > 0.3) %>%
dplyr::arrange(- org_AMI)
for (fact in as.character(unique(high_r2_groups_df_filt$factor))){
fact_cts = as.character(high_r2_groups_df_filt$group[high_r2_groups_df_filt$factor==fact])
p_top <- plot_factor_organ_boxplots(cts=fact_cts, f=fact)
p_bottom <- plot_data_top_weights_clustered(mofa_trained, cts=fact_cts, f=fact, which = "both", scale_data = TRUE)
f_pl <- (p_top / p_bottom) +
plot_layout(heights = c(1,2.5))
ggsave(glue("{figdir}/{fact}_top_organ_AMI_plot.pdf"), plot=f_pl,  width=5 + (3*length(fact_cts)), height = 9, limitsize = FALSE)
}
org_colors
plot_factor_organ_boxplots(cts=fact_cts, f=fact)
plot_factor_organ_boxplots(cts=fact_cts, f='Factor1')
plot_factor_organ_boxplots(cts='B1', f='Factor2')
as.character(unique(high_r2_groups_df_filt$factor))
for (fact in as.character(unique(high_r2_groups_df_filt$factor))[1]){
fact_cts = as.character(high_r2_groups_df_filt$group[high_r2_groups_df_filt$factor==fact])
p_top <- plot_factor_organ_boxplots(cts=fact_cts, f=fact)
p_bottom <- plot_data_top_weights_clustered(mofa_trained, cts=fact_cts, f=fact, which = "both", scale_data = TRUE)
f_pl <- (p_top / p_bottom) +
plot_layout(heights = c(1,2.5))
ggsave(glue("{figdir}/{fact}_top_organ_AMI_plot.pdf"), plot=f_pl,  width=5 + (3*length(fact_cts)), height = 9, limitsize = FALSE)
}
f_pl
f_pl
ggsave(glue("{figdir}/{fact}_top_organ_AMI_plot.pdf"), plot=f_pl,  width=5 + (3*length(fact_cts)), height = 9, limitsize = FALSE)
AMI_f_pl + (AMI_pl + remove_y_axis()) +
plot_layout(guides="collect", widths = c(8,3))
## Save info on MI
high_r2_groups_df <- high_r2_groups_df %>%
dplyr::mutate(org_AMI=AMIs)
## Fix long names for plotting
all_groups <- names(get_data(mofa_trained)[[1]])
group_labeller <- all_groups %>%
str_replace_all("_", " ") %>%
{ifelse(nchar(.) > 20, str_replace(., " ", "\n"), .)} %>%
setNames(all_groups)
AMI_pl_df <- high_r2_groups_df %>%
dplyr::group_by(group) %>%
dplyr::mutate(mean_AMI=max(org_AMI)) %>%
dplyr::ungroup() %>%
dplyr::arrange(mean_AMI) %>%
dplyr::mutate(group=group_labeller[as.character(group)]) %>%
dplyr::mutate(group=factor(group, levels=unique(group)))
AMI_pl_df %>%
ggplot(aes(org_AMI, group)) +
geom_point(aes(fill=value), size=3, shape=21) +
ggrepel::geom_text_repel(aes(label=str_remove(factor, "Factor")), color="black", force = 0.1, direction = 'x',
nudge_y           = 0.4,
hjust             = 0) +
xlab("Adj. Mutual Information - Organ ") +
scale_fill_gradientn(colours = c("white", "red"), name="% var. explained") +
theme_bw(base_size = 15)
?relevel
mofa_obj <- readRDS(glue('{indir}LYMPHOID_mofa_obj_organCorrected_filteredDonors.RDS'))
mofa_obj
mofa_obj$data
mofa_obj@data$corrected_logcounts
proB_X <- mofa_obj@data$corrected_logcounts$PRO_B
proB_X["TYROBP",]
colnames(proB_X)
str_subset(colnames(proB_X), "LI|BM")
libm_samples <- str_subset(colnames(proB_X), "LI|BM")
proB_X["TYROBP",libm_samples]
barplot(proB_X["TYROBP",libm_samples])
melt(proB_X["TYROBP",libm_samples])
reshape2::melt(proB_X["TYROBP",libm_samples])
reshape2::melt(proB_X["TYROBP",libm_samples]) %>%
head()
df <- reshape2::melt(proB_X["TYROBP",libm_samples])
df %>% rownames_to_column() %>% mutate(organ=str_detect(rowname,"LI"))
df %>% rownames_to_column() %>% mutate(organ=str_detect(rowname,"LI")) %>%
ggplot(aes(organ, value)) + geom_boxplot()
df %>% rownames_to_column() %>% mutate(LI=str_detect(rowname,"LI")) %>%
ggplot(aes(organ, value)) + geom_boxplot()
df %>% rownames_to_column() %>% mutate(organ=str_detect(rowname,"LI")) %>%
ggplot(aes(organ, value)) + geom_boxplot()
ggplot(aes(organ, value)) + geom_boxplot() + geom_point()
df %>% rownames_to_column() %>% mutate(organ=str_detect(rowname,"LI")) %>% ggplot(aes(organ, value)) + geom_boxplot() + geom_point()
gene1 = ['TYROBP','TRBC1','SRGN','NKG7','LCK','KLRB1','IL32','IFITM1','HCST','GZMM','GZMA','FYB1','CTSW','CST7','CD7','CD44','CD247']
gene2 = ['VPREB3','TCF4','MZB1','MS4A1','IGLL1','IGKC','IGHM','HLA-DRB5','HLA-DRB1','HLA-DRA','HLA-DQB1','HLA-DQA1','HLA-DPB1','HLA-DPA1','HLA-DMA','FAM129C','CD79B','CD79A','CD74','CD24']
proB_X <- mofa_obj@data$corrected_logcounts$PRO_B
libm_samples <- str_subset(colnames(proB_X), "LI|BM")
df <- reshape2::melt(proB_X["TYROBP",libm_samples])
ggplot(aes(organ, value)) + geom_boxplot() + geom_point()
gene1 = ['TYROBP','TRBC1','SRGN','NKG7','LCK','KLRB1','IL32','IFITM1','HCST','GZMM','GZMA','FYB1','CTSW','CST7','CD7','CD44','CD247']
gene2 = ['VPREB3','TCF4','MZB1','MS4A1','IGLL1','IGKC','IGHM','HLA-DRB5','HLA-DRB1','HLA-DRA','HLA-DQB1','HLA-DQA1','HLA-DPB1','HLA-DPA1','HLA-DMA','FAM129C','CD79B','CD79A','CD74','CD24']
proB_X <- mofa_obj@data$corrected_logcounts$PRO_B
libm_samples <- str_subset(colnames(proB_X), "LI|BM")
df <- reshape2::melt(proB_X[gene1,libm_samples])
ggplot(aes(organ, value)) + geom_boxplot() + geom_point()
df %>% rownames_to_column() %>% mutate(organ=str_detect(rowname,"LI")) %>%
ggplot(aes(organ, value)) + geom_boxplot() + geom_point()
head(df)
gene1
gene_1
gene2 =c('VPREB3','TCF4','MZB1','MS4A1','IGLL1','IGKC','IGHM','HLA-DRB5','HLA-DRB1','HLA-DRA','HLA-DQB1','HLA-DQA1','HLA-DPB1','HLA-DPA1','HLA-DMA','FAM129C','CD79B','CD79A','CD74','CD24')
gene1 = c('TYROBP','TRBC1','SRGN','NKG7','LCK','KLRB1','IL32','IFITM1','HCST','GZMM','GZMA','FYB1','CTSW','CST7','CD7','CD44','CD247')
proB_X <- mofa_obj@data$corrected_logcounts$PRO_B
libm_samples <- str_subset(colnames(proB_X), "LI|BM")
df <- reshape2::melt(proB_X[gene1,libm_samples])
df %>% rownames_to_column() %>% mutate(organ=str_detect(rowname,"LI")) %>%
ggplot(aes(organ, value)) + geom_boxplot() + geom_point()
head(df)
df %>%  mutate(organ=str_detect(Var2,"LI")) %>%
ggplot(aes(Var1, color=organ, value)) + geom_boxplot() + geom_point()
